;;;
;;; vmhacklib.stub
;;;

"
#include <gauche.h>
#include <gauche/extend.h>
#include <gauche/code.h>
#include <gauche/prof.h>

SCM_DECL_BEGIN

ScmObj vm_code_execute(ScmObj v, ScmObj e);

SCM_DECL_END

/*
 *    vm_code_execute: execute ccb.
 *
 *    Used src/vm.c:Scm_VMEval() as starting point.
 *    Changes are
 *       - commented out compiler call.
 *       - Use Scm_VM() instead of theVM.
 *       - replace SCM_SYM_EVAL_{BEFORE,AFTER} by SCM_MAKE_STR().
 */

static ScmObj eval_restore_env(ScmObj *args, int argc, void *data)
{
    Scm_VM()->module = SCM_MODULE(data);
    return SCM_UNDEFINED;
}

/* For now, we only support a module as the evaluation environment */
ScmObj vm_code_execute(ScmObj v, ScmObj e)
{
    int restore_module = SCM_MODULEP(e);
    ScmVM *vm = Scm_VM();

    /*
       ScmObj v = Scm_Compile(expr, e);
       if (SCM_VM_COMPILER_FLAG_IS_SET(theVM, SCM_COMPILE_SHOWRESULT)) {
         Scm_CompiledCodeDump(SCM_COMPILED_CODE(v));
       }
    */
    vm->numVals = 1;
    if (restore_module) {
        /* if we swap the module, we need to make sure it is recovered
           after eval */
        ScmObj body = Scm_MakeClosure(v, NULL);
        ScmObj before = Scm_MakeSubr(eval_restore_env, SCM_MODULE(e),
                                     0, 0, SCM_MAKE_STR(\"vmhack-before\"));
        ScmObj after = Scm_MakeSubr(eval_restore_env, (void*)vm->module,
                                    0, 0, SCM_MAKE_STR(\"vmhack-after\"));
        return Scm_VMDynamicWind(before, body, after);
    } else {
        /* shortcut */
        SCM_ASSERT(SCM_COMPILED_CODE_P(v));
        vm->base = SCM_COMPILED_CODE(v);
        vm->pc = SCM_COMPILED_CODE(v)->code;
        SCM_PROF_COUNT_CALL(vm, v);
        return SCM_UNDEFINED;
    }
}

/*
 *    Module initialization function.
 */
void Scm_Init_vmhacklib(ScmModule*);

void Scm_Init_vmhack(void)
{
    ScmModule *mod;

    /* Register this DSO to Gauche */
    SCM_INIT_EXTENSION(vmhack);

    /* Create the module if it doesn't exist yet. */
    mod = SCM_MODULE(SCM_FIND_MODULE(\"vmhack\", TRUE));

    /* Register stub-generated procedures */
    Scm_Init_vmhacklib(mod);
}
"

(define-cproc vm-code-execute! (expr env) vm_code_execute)

(define-cproc compiled-code-required-args   (cc::<compiled-code>) (return (SCM_MAKE_INT (-> cc requiredArgs))))
(define-cproc compiled-code-optional-args   (cc::<compiled-code>) (return (SCM_MAKE_INT (-> cc optionalArgs))))
(define-cproc compiled-code-name            (cc::<compiled-code>) (return (-> cc name)))
(define-cproc compiled-code-code-size       (cc::<compiled-code>) (return (SCM_MAKE_INT (-> cc codeSize))))
(define-cproc compiled-code-maxstack        (cc::<compiled-code>) (return (SCM_MAKE_INT (-> cc maxstack))))
(define-cproc compiled-code-args            (cc::<compiled-code>)
  (return (SCM_LIST2 (SCM_MAKE_INT (-> cc requiredArgs))
                     (SCM_MAKE_INT (-> cc optionalArgs)))))

"
"
;; Local variables:
;; mode: scheme
;; end:
